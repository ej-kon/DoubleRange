class DoubleRange{static#t=0;static#i=new WeakMap;#s=!1;#e=null;#h=!1;#o=null;#a=null;#r=null;#n=null;#l=null;#u=null;#m=null;#c=null;#b=null;#g=0;#f=null;#d=null;#w=null;#p=0;#v=100;#$=1;#R=0;#y=100;#x=null;#D=!1;#E=null;#T=null;#M=null;#k=i=>this.#F(i,"from");#C=i=>this.#F(i,"to");#L=i=>this.#F(i,"from",!0);#A=i=>this.#F(i,"to",!0);#j=i=>this.#z(i,"from");#O=i=>this.#z(i,"to");#S=i=>this.#V(i);#q=i=>this.#K(i);#B=()=>this.#U();#I=i=>this.#K(i);#W=()=>this.#U();static create(i){if(!i||"object"!=typeof i)throw new TypeError("config must be an object");if(["selector"].forEach(s=>{if("string"!=typeof i[s])throw new TypeError(`${s} must be a string`)}),["min","max","from","to","step"].forEach(s=>{if("number"!=typeof i[s])throw new TypeError(`${s} must be a number`)}),i.from<i.min||i.from>i.max)throw new RangeError("from value out of range");if(i.to<i.min||i.to>i.max)throw new RangeError("to value out of range");if(i.from>=i.to)throw new RangeError("from must be less than to");if("function"!=typeof i.callback)throw new TypeError("callback must be a function");"number"!=typeof i.delay&&(i.delay=0),"function"!=typeof i.formatter&&(i.formatter=i=>i),"string"!=typeof i.label&&(i.label="Range selector"),DoubleRange.#t++;const s="doubleRange"+DoubleRange.#t,e=DoubleRange.#G(i.selector);return e.textContent="",e.insertAdjacentHTML("beforeend",`<div class="double-range"><div role="group" aria-label="${i.label}"><aside class="start point"></aside><aside class="min limit">${i.formatter(i.min)}</aside><label for="${s}-from" class="from">${i.formatter(i.from)}</label><div class="track" role="none"><div class="thumb from" id="${s}-from" role="slider" tabindex="0" aria-orientation="horizontal" aria-valuemin="${i.min}" aria-valuemax="${i.max}" aria-valuenow="${i.from}" aria-valuetext="${i.formatter(i.from)}"></div><div class="thumb to" id="${s}-to" role="slider" tabindex="0" aria-orientation="horizontal" aria-valuemin="${i.min}" aria-valuemax="${i.max}" aria-valuenow="${i.to}" aria-valuetext="${i.formatter(i.to)}"></div><div class="range-bar"></div></div><label for="${s}-to" class="to">${i.formatter(i.to)}</label><aside class="max limit">${i.formatter(i.max)}</aside><aside class="end point"></aside></div></div>`),new DoubleRange(i)}constructor(i){if("string"!=typeof i.selector)throw new TypeError("selector must be a string");if("function"!=typeof i.callback)throw new TypeError("callback must be a function");"function"==typeof i.beforeFromChange&&(this.#d=i.beforeFromChange),"function"==typeof i.beforeToChange&&(this.#w=i.beforeToChange),this.#g="number"==typeof i.delay?i.delay:0,this.#c="function"==typeof i.formatter?i.formatter:i=>i,this.#b=i.callback;const s=DoubleRange.#G(i.selector);if(DoubleRange.#i.has(s))throw new Error("DoubleRange is already initialized on this element");if(this.#a=s.querySelector(".thumb.thumb.from"),this.#r=s.querySelector(".thumb.thumb.to"),this.#n=s.querySelector("label.from"),this.#l=s.querySelector("label.to"),this.#u=s.querySelector(".min.limit"),this.#m=s.querySelector(".max.limit"),this.#o=s.querySelector(".track"),!(this.#a&&this.#r&&this.#o&&this.#n&&this.#l))throw new Error("Missing required elements");if(this.#p=parseFloat(this.#a.getAttribute("aria-valuemin")),this.#v=parseFloat(this.#a.getAttribute("aria-valuemax")),this.#$=i.step??1,this.#R=parseFloat(this.#a.getAttribute("aria-valuenow"))||i.from||this.#p,this.#y=parseFloat(this.#r.getAttribute("aria-valuenow"))||i.to||this.#v,this.#R>=this.#y)throw new Error("Initial values: from must be less than to");this.#e=s.querySelector(".double-range"),DoubleRange.#i.set(this.#e,this);let e=!0;this.#M=new ResizeObserver(()=>{e?e=!1:this.#e.isConnected?this.#H():this.destroy()}),this.#M.observe(this.#e),this.#s=!1,this.#H(),this.#J(),this.#N();const h=window.getComputedStyle(this.#n,"::after");if(h.content){const i=`translate(calc(-50% + ${h.width}), -50%)`;this.#n.style.transform=i,this.#n.style.webkitTransform=i}}#H=()=>{this.#E=this.#o.getBoundingClientRect(),this.#T=this.#e.getBoundingClientRect(),this.#P(),this.#Q()};static getBySelector(i){const s=DoubleRange.#G(i).querySelector(".double-range");return s&&DoubleRange.#i.has(s)?DoubleRange.#i.get(s):null}static getByContainer(i){const s=i.querySelector(".double-range");return s&&DoubleRange.#i.has(s)?DoubleRange.#i.get(s):null}static#G(i){const s=document.querySelectorAll(i);if(0===s.length)throw new Error(`Element ${i} not found`);if(s.length>1)throw new Error(`Multiple elements match ${i}`);return s[0]}#V(i){const s=(i.clientX-this.#E.left)/this.#E.width,e=this.#p+s*(this.#v-this.#p),h=Math.round((e-this.#p)/this.#$)*this.#$+this.#p;Math.abs(h-this.#R)<Math.abs(h-this.#y)?this.setFrom(h):this.setTo(h)}#N(){this.#a.addEventListener("mousedown",this.#k),this.#r.addEventListener("mousedown",this.#C),this.#a.addEventListener("touchstart",this.#L,{passive:!1}),this.#r.addEventListener("touchstart",this.#A,{passive:!1}),this.#a.addEventListener("keydown",this.#j),this.#r.addEventListener("keydown",this.#O),this.#o.addEventListener("click",this.#S)}#F(i,s,e=!1){i.preventDefault(),"from"===s?(this.#a.style.zIndex=3,this.#r.style.zIndex=2,this.#a.classList.add("dragging")):(this.#a.style.zIndex=2,this.#r.style.zIndex=3,this.#r.classList.add("dragging")),this.#x=s,this.#D=!0,clearTimeout(this.#f),document.addEventListener("mousemove",this.#q),document.addEventListener("mouseup",this.#B),document.addEventListener("touchmove",this.#I,{passive:!1}),document.addEventListener("touchend",this.#W),document.body.classList.add("double-range-dragging")}#K(i){if(!this.#x)return;const s=i.clientX??i.touches?.[0]?.clientX;if(!s||!this.#E)return;const e=Math.max(0,Math.min(1,(s-this.#E.left)/this.#E.width)),h=this.#p+e*(this.#v-this.#p),o=Math.round((h-this.#p)/this.#$)*this.#$+this.#p;this.#X(this.#x,o)}#U(){this.#x&&(document.removeEventListener("mousemove",this.#q),document.removeEventListener("mouseup",this.#B),document.removeEventListener("touchmove",this.#I),document.removeEventListener("touchend",this.#W),this.#x=null,this.#D=!1,this.#a.classList.remove("dragging"),this.#r.classList.remove("dragging"),this.#Y(),document.body.classList.remove("double-range-dragging"))}#z(i,s){const e=this.#$;let h=!1;switch(i.key){case"ArrowLeft":case"ArrowDown":i.preventDefault(),this.#Z(s)-e>=this.#p&&(this.#X(s,this.#Z(s)-e),h=!0);break;case"ArrowRight":case"ArrowUp":i.preventDefault(),this.#Z(s)+e<=this.#v&&(this.#X(s,this.#Z(s)+e),h=!0)}h&&this.#Y()}#Z(i){return"from"===i?this.#R:this.#y}#X(i,s){"from"==i?this.setFrom(s):this.setTo(s)}#Q(){this.#u.textContent=this.#c(this.#p),this.#u.style.left="0px";let i=this.#u.getBoundingClientRect().left-this.#T.left;i<0&&(this.#u.style.left=-1*i+"px"),this.#m.textContent=this.#c(this.#v),this.#m.style.right="0px";const s=this.#m.getBoundingClientRect();i=s.left-this.#T.left;const e=i+s.width-this.#T.width;e>0&&(this.#m.style.right=`${e}px`)}#P(){this.#h&&this.#e.classList.remove("collision"),this.#h=!1,this.#n.textContent=this.#c(this.#R),this.#l.textContent=this.#c(this.#y);const i=this.#v-this.#p;let s=`${(this.#R-this.#p)/i*100}%`,e=`${(this.#y-this.#p)/i*100}%`;if(this.#n.style.left=s,this.#l.style.left=e,!this.#n.offsetParent||!this.#l.offsetParent)return;let h=this.#n.getBoundingClientRect(),o=this.#l.getBoundingClientRect();const a=h.left+h.width-o.left;if(a>0){this.#e.classList.add("collision"),this.#h=!0;const i=a/2+"px";s+=` - ${i}`,this.#n.style.left=`calc(${s})`,e+=` + ${i}`,this.#l.style.left=`calc(${e})`,h=this.#n.getBoundingClientRect(),o=this.#l.getBoundingClientRect()}let r=o.left-this.#T.left;const n=r+o.width-this.#T.width;if(n>0){e+=` - ${n}px`,this.#l.style.left=`calc(${e})`,r=h.left-this.#T.left;let i=r+h.width-(this.#T.width-o.width);i>0&&(this.#e.classList.add("collision"),this.#h=!0,s+=` - ${i}px`,this.#n.style.left=`calc(${s})`)}r=h.left-this.#T.left,r<0&&(s+=` + ${-1*r}px`,this.#n.style.left=`calc(${s})`,r=o.left-this.#T.left,r<h.width&&(this.#e.classList.add("collision"),this.#h=!0,e+=` + ${h.width-r}px`,this.#l.style.left=`calc(${e})`))}#J(){const i=this.#v-this.#p,s=(this.#R-this.#p)/i*100,e=(this.#y-this.#p)/i*100;this.#a.style.left=`${s}%`,this.#r.style.left=`${e}%`;const h=this.#o.querySelector(".range-bar");h.style.left=`${s}%`,h.style.width=e-s+"%"}#Y(){clearTimeout(this.#f),this.#f=setTimeout(()=>{this.#b(this.#R,this.#y),this.#e.dispatchEvent(new CustomEvent("range-change",{detail:{from:this.#R,to:this.#y},bubbles:!0}))},this.#g)}setMin(i,s=!0){if("number"!=typeof i)throw new TypeError("DoubleRange.setMin: min must be a number");if(i>=this.#v)throw new RangeError(`DoubleRange.setMin: min (${i}) must be less than max (${this.#v})`);if(i>this.#R)throw new RangeError(`DoubleRange.setMin: min (${i}) must be less than or equal to current from value (${this.#R})`);return this.#p=i,this.#a.setAttribute("aria-valuemin",i),this.#r.setAttribute("aria-valuemin",i),this.#P(),this.#Q(),this.#J(),s&&this.#Y(),this}setMax(i,s=!0){if("number"!=typeof i)throw new TypeError("DoubleRange.setMax: max must be a number");if(i<=this.#p)throw new RangeError(`DoubleRange.setMax: max (${i}) must be greater than min (${this.#p})`);if(i<this.#y)throw new RangeError(`DoubleRange.setMax: max (${i}) must be greater than or equal to current to value (${this.#y})`);return this.#v=i,this.#a.setAttribute("aria-valuemax",i),this.#r.setAttribute("aria-valuemax",i),this.#P(),this.#Q(),this.#J(),s&&this.#Y(),this}setFrom(i,s=!0){if("number"!=typeof i)throw new TypeError("DoubleRange.setFrom: from must be a number");return!(i<this.#p||i>this.#v)&&(!(i>=this.#y)&&(!(null!==this.#d&&!this.#d(i,this.#y))&&(this.#R=i,this.#a.setAttribute("aria-valuenow",i),this.#a.setAttribute("aria-valuetext",this.#c(i)),this.#P(),this.#J(),s&&this.#Y(),this)))}setTo(i,s=!0){if("number"!=typeof i)throw new TypeError("DoubleRange.setTo: to must be a number");return!(i<this.#p||i>this.#v)&&(!(i<=this.#R)&&(!(null!==this.#w&&!this.#w(this.#R,i))&&(this.#y=i,this.#r.setAttribute("aria-valuenow",i),this.#r.setAttribute("aria-valuetext",this.#c(i)),this.#P(),this.#J(),s&&this.#Y(),this)))}update(i,s=!0){if(!(i&&"object"==typeof i&&!Array.isArray(i)&&i.constructor===Object))throw new TypeError("DoubleRange.update: Argument must be a plain object with optional keys: min, max, from, to");const e={min:this.#p,max:this.#v,from:this.#R,to:this.#y},h={};for(const s of["min","max","from","to"])if(h[s]=void 0!==i[s]?i[s]:e[s],"number"!=typeof h[s])throw new TypeError(`DoubleRange.update: '${s}' must be a number`);if(h.min>=h.max)throw new RangeError(`DoubleRange.update: min (${h.min}) must be less than max (${h.max})`);if(h.from<h.min||h.from>h.max)throw new RangeError(`DoubleRange.update: from (${h.from}) must be between min (${h.min}) and max (${h.max})`);if(h.to<h.min||h.to>h.max)throw new RangeError(`DoubleRange.update: to (${h.to}) must be between min (${h.min}) and max (${h.max})`);if(h.from>=h.to)throw new RangeError(`DoubleRange.update: from (${h.from}) must be less than to (${h.to})`);return this.#p=h.min,this.#v=h.max,this.#R=h.from,this.#y=h.to,this.#a.setAttribute("aria-valuemin",h.min),this.#a.setAttribute("aria-valuemax",h.max),this.#a.setAttribute("aria-valuenow",h.from),this.#a.setAttribute("aria-valuetext",this.#c(h.from)),this.#r.setAttribute("aria-valuemin",h.min),this.#r.setAttribute("aria-valuemax",h.max),this.#r.setAttribute("aria-valuenow",h.to),this.#r.setAttribute("aria-valuetext",this.#c(h.to)),this.#P(),this.#Q(),this.#J(),s&&this.#Y(),this}getFrom(){return this.#R}getTo(){return this.#y}getMin(){return this.#p}getMax(){return this.#v}getRange(){return{from:this.#R,to:this.#y}}destroy(){this.#s||(this.#a.removeEventListener("mousedown",this.#k),this.#r.removeEventListener("mousedown",this.#C),this.#a.removeEventListener("touchstart",this.#L),this.#r.removeEventListener("touchstart",this.#A),this.#a.removeEventListener("keydown",this.#j),this.#r.removeEventListener("keydown",this.#O),this.#o.removeEventListener("click",this.#S),this.#x&&this.#U(),this.#M&&(this.#M.disconnect(),this.#M=null),this.#f&&(clearTimeout(this.#f),this.#f=null),this.#e&&DoubleRange.#i.has(this.#e)&&DoubleRange.#i.delete(this.#e),this.#s=!0)}}